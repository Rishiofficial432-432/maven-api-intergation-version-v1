

import { createClient } from '@supabase/supabase-js';

/*
-- =================================================================
-- SUPABASE PORTAL SCHEMA SETUP
-- =================================================================
-- Instructions:
-- 1. Go to your Supabase project dashboard.
-- 2. Navigate to the "SQL Editor".
-- 3. Click "+ New query".
-- 4. Copy the entire script below and paste it into the editor.
-- 5. Click "RUN".
--
-- This script is idempotent, meaning you can run it multiple times
-- without causing errors. It will create tables if they don't exist
-- and add missing columns/constraints.
-- =================================================================

-- Table: portal_users
-- Stores profiles for students and teachers.
CREATE TABLE IF NOT EXISTS public.portal_users (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    name text NOT NULL,
    email text UNIQUE,
    role text DEFAULT 'student'::text NOT NULL,
    enrollment_id text UNIQUE,
    password text,
    phone text
);

-- Table: portal_sessions
-- Stores QR code attendance sessions created by teachers.
CREATE TABLE IF NOT EXISTS public.portal_sessions (
    id uuid DEFAULT gen_random_uuid() PRIMARY KEY,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    expires_at timestamp with time zone NOT NULL,
    teacher_id bigint,
    is_active boolean DEFAULT true NOT NULL,
    session_code text UNIQUE,
    CONSTRAINT portal_sessions_teacher_id_fkey FOREIGN KEY (teacher_id) REFERENCES public.portal_users(id) ON DELETE SET NULL
);

-- Table: portal_attendance
-- Logs student check-ins for each session.
CREATE TABLE IF NOT EXISTS public.portal_attendance (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    student_id bigint,
    session_id uuid,
    CONSTRAINT portal_attendance_student_id_fkey FOREIGN KEY (student_id) REFERENCES public.portal_users(id) ON DELETE CASCADE,
    CONSTRAINT portal_attendance_session_id_fkey FOREIGN KEY (session_id) REFERENCES public.portal_sessions(id) ON DELETE CASCADE,
    CONSTRAINT portal_attendance_student_session_unique UNIQUE (student_id, session_id)
);

-- Table: portal_curriculum
-- Stores daily curriculum logs created by teachers.
CREATE TABLE IF NOT EXISTS public.portal_curriculum (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    teacher_id bigint NOT NULL,
    date date NOT NULL,
    topic text,
    activities text,
    CONSTRAINT portal_curriculum_teacher_id_fkey FOREIGN KEY (teacher_id) REFERENCES public.portal_users(id) ON DELETE CASCADE,
    CONSTRAINT portal_curriculum_teacher_date_unique UNIQUE (teacher_id, date)
);


-- RLS is not managed by this script to keep things simple.
-- If you enable RLS, you must create policies for each table to allow access.
-- Insert a default teacher if one doesn't exist.
INSERT INTO public.portal_users (name, email, role, password)
VALUES ('Teacher', 'teacher@example.com', 'teacher', 'password123')
ON CONFLICT (email) DO NOTHING;
*/

// Define database types for Supabase to enable type safety
export type Json =
  | string
  | number
  | boolean
  | null
  | { [key: string]: Json | undefined }
  | Json[]

export interface Database {
  public: {
    Tables: {
      portal_attendance: {
        Row: {
          created_at: string
          id: number
          session_id: string | null
          student_id: number | null
        }
        Insert: {
          created_at?: string
          id?: number
          session_id?: string | null
          student_id?: number | null
        }
        Update: {
          created_at?: string
          id?: number
          session_id?: string | null
          student_id?: number | null
        }
        Relationships: [
          {
            foreignKeyName: "portal_attendance_session_id_fkey"
            columns: ["session_id"]
            referencedRelation: "portal_sessions"
            referencedColumns: ["id"]
          },
          {
            foreignKeyName: "portal_attendance_student_id_fkey"
            columns: ["student_id"]
            referencedRelation: "portal_users"
            referencedColumns: ["id"]
          }
        ]
      }
      portal_curriculum: {
        Row: {
            activities: string | null
            created_at: string
            date: string
            id: number
            teacher_id: number
            topic: string | null
        }
        Insert: {
            activities?: string | null
            created_at?: string
            date: string
            id?: number
            teacher_id: number
            topic?: string | null
        }
        Update: {
            activities?: string | null
            created_at?: string
            date?: string
            id?: number
            teacher_id?: number
            topic?: string | null
        }
        Relationships: [
          {
            foreignKeyName: "portal_curriculum_teacher_id_fkey"
            columns: ["teacher_id"]
            referencedRelation: "portal_users"
            referencedColumns: ["id"]
          }
        ]
      }
      portal_sessions: {
        Row: {
          created_at: string
          expires_at: string
          id: string
          is_active: boolean
          teacher_id: number | null
          session_code: string | null
        }
        Insert: {
          created_at?: string
          expires_at: string
          id?: string
          is_active?: boolean
          teacher_id?: number | null
          session_code?: string | null
        }
        Update: {
          created_at?: string
          expires_at?: string
          id?: string
          is_active?: boolean
          teacher_id?: number | null
          session_code?: string | null
        }
        Relationships: [
          {
            foreignKeyName: "portal_sessions_teacher_id_fkey"
            columns: ["teacher_id"]
            referencedRelation: "portal_users"
            referencedColumns: ["id"]
          }
        ]
      }
      portal_users: {
        Row: {
          created_at: string
          email: string | null
          enrollment_id: string | null
          id: number
          name: string
          password: string | null
          phone: string | null
          role: string
        }
        Insert: {
          created_at?: string
          email?: string | null
          enrollment_id?: string | null
          id?: number
          name: string
          password?: string | null
          phone?: string | null
          role?: string
        }
        Update: {
          created_at?: string
          email?: string | null
          enrollment_id?: string | null
          id?: number
          name?: string
          password?: string | null
          phone?: string | null
          role?: string
        }
        Relationships: []
      }
    }
    Views: {
      [_ in never]: never
    }
    Functions: {
      [_ in never]: never
    }
    Enums: {
      [_ in never]: never
    }
    CompositeTypes: {
      [_ in never]: never
    }
  }
}


// --- Supabase Configuration ---
const supabaseUrl = 'YOUR_SUPABASE_URL';
const supabaseAnonKey = 'YOUR_SUPABASE_ANON_KEY';

let supabase: ReturnType<typeof createClient<Database>> | null = null;
export let isSupabaseConfigured = false;

const isUrlPlaceholder = supabaseUrl.includes('YOUR_SUPABASE_URL');
const isKeyPlaceholder = supabaseAnonKey.includes('YOUR_SUPABASE_ANON_KEY');

if (!isUrlPlaceholder && !isKeyPlaceholder) {
    try {
        supabase = createClient<Database>(supabaseUrl, supabaseAnonKey);
        isSupabaseConfigured = true;
    } catch (e) {
        console.error("Supabase initialization error:", e);
        supabase = null;
        isSupabaseConfigured = false;
    }
} else {
    console.log("Supabase credentials not found. Student/Teacher Portal is running in a local-only mock mode.");
}

export { supabase };