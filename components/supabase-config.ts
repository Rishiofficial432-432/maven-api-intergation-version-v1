





import { createClient, SupabaseClient } from '@supabase/supabase-js';

/*
-- =================================================================
-- SUPABASE PORTAL SCHEMA SETUP
-- =================================================================
-- Instructions:
-- 1. Go to your Supabase project dashboard.
-- 2. Navigate to the "SQL Editor".
-- 3. Click "+ New query".
-- 4. Copy the entire script below and paste it into the editor.
-- 5. Click "RUN".
--
-- This script is idempotent, meaning you can run it multiple times
-- without causing errors. It will create tables if they don't exist
-- and add missing columns/constraints.
-- =================================================================

-- Table: portal_users
-- Stores profiles for students and teachers.
CREATE TABLE IF NOT EXISTS public.portal_users (
    id uuid DEFAULT auth.uid() PRIMARY KEY,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    name text NOT NULL,
    email text UNIQUE,
    role text DEFAULT 'student'::text NOT NULL,
    enrollment_id text UNIQUE,
    phone text,
    teacher_id uuid REFERENCES public.portal_users(id) ON DELETE SET NULL
);

-- After creating the table, you might want to link it to the auth schema
-- This function and trigger automatically creates a user profile upon signup.
create or replace function public.handle_new_user()
returns trigger
language plpgsql
security definer set search_path = public
as $$
begin
  insert into public.portal_users (id, name, email, role, enrollment_id)
  values (
    new.id, 
    new.raw_user_meta_data ->> 'name', 
    new.email, 
    new.raw_user_meta_data ->> 'role',
    new.raw_user_meta_data ->> 'enrollment_id'
  );
  return new;
end;
$$;


-- Trigger to execute the function after a new user signs up
create or replace trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();


-- Table: portal_sessions
-- Stores attendance sessions created by teachers.
CREATE TABLE IF NOT EXISTS public.portal_sessions (
    id uuid DEFAULT gen_random_uuid() PRIMARY KEY,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    expires_at timestamp with time zone NOT NULL,
    teacher_id uuid NOT NULL,
    is_active boolean DEFAULT true NOT NULL,
    session_code text UNIQUE,
    location_enforced boolean default false,
    location jsonb,
    location_name text,
    CONSTRAINT portal_sessions_teacher_id_fkey FOREIGN KEY (teacher_id) REFERENCES public.portal_users(id) ON DELETE CASCADE
);

-- Table: portal_attendance
-- Logs student check-ins for each session.
CREATE TABLE IF NOT EXISTS public.portal_attendance (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    student_id uuid NOT NULL,
    session_id uuid NOT NULL,
    student_name text,
    enrollment_id text,
    teacher_id uuid NOT NULL,
    CONSTRAINT portal_attendance_student_id_fkey FOREIGN KEY (student_id) REFERENCES public.portal_users(id) ON DELETE CASCADE,
    CONSTRAINT portal_attendance_session_id_fkey FOREIGN KEY (session_id) REFERENCES public.portal_sessions(id) ON DELETE CASCADE,
    CONSTRAINT portal_attendance_teacher_id_fkey FOREIGN KEY (teacher_id) REFERENCES public.portal_users(id) ON DELETE CASCADE,
    CONSTRAINT portal_attendance_student_session_unique UNIQUE (student_id, session_id)
);


-- Table: portal_curriculum
-- Stores daily curriculum logs created by teachers.
CREATE TABLE IF NOT EXISTS public.portal_curriculum (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    teacher_id uuid NOT NULL,
    date date NOT NULL,
    topic text,
    activities text,
    CONSTRAINT portal_curriculum_teacher_id_fkey FOREIGN KEY (teacher_id) REFERENCES public.portal_users(id) ON DELETE CASCADE,
    CONSTRAINT portal_curriculum_teacher_date_unique UNIQUE (teacher_id, date)
);
*/

// Define database types for Supabase to enable type safety
export type Json =
  | string
  | number
  | boolean
  | null
  | { [key: string]: Json | undefined }
  | Json[]

export interface Database {
  public: {
    Tables: {
      portal_attendance: {
        Row: {
          created_at: string
          id: number
          session_id: string
          student_id: string
          student_name: string | null
          enrollment_id: string | null
          teacher_id: string
        }
        Insert: {
          created_at?: string
          id?: number
          session_id: string
          student_id: string
          student_name?: string | null
          enrollment_id?: string | null
          teacher_id: string
        }
        Update: {
          created_at?: string
          id?: number
          session_id?: string
          student_id?: string
          student_name?: string | null
          enrollment_id?: string | null
          teacher_id?: string
        }
        Relationships: [
          {
            foreignKeyName: "portal_attendance_session_id_fkey"
            columns: ["session_id"]
            referencedRelation: "portal_sessions"
            referencedColumns: ["id"]
          },
          {
            foreignKeyName: "portal_attendance_student_id_fkey"
            columns: ["student_id"]
            referencedRelation: "portal_users"
            referencedColumns: ["id"]
          },
           {
            foreignKeyName: "portal_attendance_teacher_id_fkey"
            columns: ["teacher_id"]
            referencedRelation: "portal_users"
            referencedColumns: ["id"]
          }
        ]
      }
      portal_curriculum: {
        Row: {
            activities: string | null
            created_at: string
            date: string
            id: number
            teacher_id: string
            topic: string | null
        }
        Insert: {
            activities?: string | null
            created_at?: string
            date: string
            id?: number
            teacher_id: string
            topic?: string | null
        }
        Update: {
            activities?: string | null
            created_at?: string
            date?: string
            id?: number
            teacher_id?: string
            topic?: string | null
        }
        Relationships: [
          {
            foreignKeyName: "portal_curriculum_teacher_id_fkey"
            columns: ["teacher_id"]
            referencedRelation: "portal_users"
            referencedColumns: ["id"]
          }
        ]
      }
      portal_sessions: {
        Row: {
          created_at: string
          expires_at: string
          id: string
          is_active: boolean
          teacher_id: string
          session_code: string | null
          location_enforced: boolean
          location: Json | null
          location_name: string | null
        }
        Insert: {
          created_at?: string
          expires_at: string
          id?: string
          is_active?: boolean
          teacher_id: string
          session_code?: string | null
          location_enforced?: boolean
          location?: Json | null
          location_name?: string | null
        }
        Update: {
          created_at?: string
          expires_at?: string
          id?: string
          is_active?: boolean
          teacher_id?: string
          session_code?: string | null
          location_enforced?: boolean
          location?: Json | null
          location_name?: string | null
        }
        Relationships: [
          {
            foreignKeyName: "portal_sessions_teacher_id_fkey"
            columns: ["teacher_id"]
            referencedRelation: "portal_users"
            referencedColumns: ["id"]
          }
        ]
      }
      portal_users: {
        Row: {
          created_at: string
          email: string | null
          enrollment_id: string | null
          id: string
          name: string
          phone: string | null
          role: string
          teacher_id: string | null
        }
        Insert: {
          created_at?: string
          email?: string | null
          enrollment_id?: string | null
          id: string
          name: string
          phone?: string | null
          role?: string
          teacher_id?: string | null
        }
        Update: {
          created_at?: string
          email?: string | null
          enrollment_id?: string | null
          id?: string
          name?: string
          phone?: string | null
          role?: string
          teacher_id?: string | null
        }
        Relationships: [
             {
                foreignKeyName: "portal_users_teacher_id_fkey"
                columns: ["teacher_id"]
                referencedRelation: "portal_users"
                referencedColumns: ["id"]
            }
        ]
      }
    }
    Views: {
      [_ in never]: never
    }
    Functions: {
      [_ in never]: never
    }
    Enums: {
      [_ in never]: never
    }
    CompositeTypes: {
      [_ in never]: never
    }
  }
}

// --- Supabase Configuration using localStorage ---
let supabase: SupabaseClient<Database> | null = null;
let isSupabaseConfigured = false;
let connectionStatus = { configured: false, message: "Supabase credentials not configured. Please add them in Settings." };

const createSupabaseClient = (url?: string, key?: string): SupabaseClient<Database> | null => {
    const storedUrl = url || localStorage.getItem('supabase-url');
    const storedKey = key || localStorage.getItem('supabase-anon-key');

    if (!storedUrl || !storedUrl.trim() || !storedKey || !storedKey.trim()) {
        isSupabaseConfigured = false;
        connectionStatus = { configured: false, message: "Supabase credentials not configured. Please add them in Settings." };
        return null;
    }

    try {
        // Create a temporary client to test with the new credentials
        const client = createClient<Database>(storedUrl, storedKey);
        isSupabaseConfigured = true;
        // Don't set the main connection status message yet, that happens after testing
        return client;
    } catch (e) {
        console.error("Critical error creating Supabase client:", e);
        isSupabaseConfigured = false;
        connectionStatus = { configured: false, message: "Error: Could not create Supabase client. The URL might be invalid." };
        return null;
    }
};

const updateSupabaseCredentials = async (url: string, key: string): Promise<{ success: boolean; message: string }> => {
    const trimmedUrl = url.trim();
    const trimmedKey = key.trim();

    if (!trimmedUrl || !trimmedKey) {
        localStorage.removeItem('supabase-url');
        localStorage.removeItem('supabase-anon-key');
        supabase = null;
        isSupabaseConfigured = false;
        connectionStatus = { configured: false, message: "Credentials cleared. Portal is disabled." };
        return { success: false, message: connectionStatus.message };
    }

    localStorage.setItem('supabase-url', trimmedUrl);
    localStorage.setItem('supabase-anon-key', trimmedKey);
    
    // Create a temporary client to test the new credentials
    const tempClient = createSupabaseClient(trimmedUrl, trimmedKey);
    
    if (!tempClient) {
        connectionStatus = { configured: false, message: "Connection failed: The provided URL or Key is invalid." };
        supabase = null;
        isSupabaseConfigured = false;
        return { success: false, message: connectionStatus.message };
    }

    // Perform a simple test query to verify connection and permissions
    const { error } = await tempClient.from('portal_users').select('id', { count: 'exact', head: true });

    if (error && error.code !== '42P01') { // 42P01 means table doesn't exist, which is a setup issue, not a connection one.
        console.error("Supabase connection test failed:", error);
        connectionStatus = { configured: false, message: `Connection failed: ${error.message}. Please check your URL and Anon Key.` };
        supabase = null;
        isSupabaseConfigured = false;
        return { success: false, message: connectionStatus.message };
    }
    
    // If the test passes, assign the new client to be the main one
    supabase = tempClient;
    isSupabaseConfigured = true;
    const successMessage = error?.code === '42P01'
        ? "Connection successful, but 'portal_users' table not found. Please run the setup script in the Supabase SQL editor."
        : "Connection successful and credentials saved.";

    connectionStatus = { configured: true, message: successMessage };
    return { success: true, message: successMessage };
};

const getSupabaseCredentials = (): { url: string; key: string } => {
    const url = localStorage.getItem('supabase-url') || '';
    const key = localStorage.getItem('supabase-anon-key') || '';
    return { url, key };
};

// Initial load
supabase = createSupabaseClient();

const initPromise = Promise.resolve(true);

export { 
    supabase, 
    isSupabaseConfigured, 
    connectionStatus, 
    updateSupabaseCredentials, 
    getSupabaseCredentials,
    initPromise
};